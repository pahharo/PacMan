/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package guipacman;
import data.*;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;


/**
 *
 * @author m4nu_sl
 */
public class RejillaPanel extends javax.swing.JPanel {
    private PacmanFrame frame;
    private int anchocelda=-1;
    public int lastmove;
    private boolean start = true; // Para colocar botón de parar y continuar
    /**
     * Creates new form RejillaPanel
     */
    public RejillaPanel(PacmanFrame fr){
        this();
        frame = fr;
    }
    public RejillaPanel() {
        initComponents();
    }
    /**
* Dibuja cada una de las celdas de la matriz bidimensional de la Rejilla.
* Cada celda puede estar ocupada por BLOQUE (muro exterior) o PIEZA
* (elemento de una Figura)
a
* @param el Graphics donde se dibujar ́
*/
public void dibujaRejilla(java.awt.Graphics g){

    int i,j;
    Rejilla rejilla=frame.getRejilla();
    int xoffset=(getWidth()-rejilla.getAnchura()*anchocelda)/2;
    for(i=0;i<rejilla.getAnchura();i++){
        for(j=0;j<rejilla.getAltura();j++){
            if(rejilla.getTipoCelda(i,j) == Rejilla.BLOQUE){
                g.setColor(Color.BLUE);
                g.drawRect(xoffset+i*anchocelda,j*anchocelda,anchocelda,
                anchocelda);
                g.fillRect(xoffset+i*anchocelda,j*anchocelda,anchocelda,
                anchocelda);
            } else if(rejilla.getTipoCelda(i,j) == Rejilla.PACMAN){
                g.setColor(Color.YELLOW);
                g.fillRect(xoffset+i*anchocelda,j*anchocelda,anchocelda,
                anchocelda);
                g.setColor(Color.RED);
                g.drawRect(xoffset+i*anchocelda,j*anchocelda,anchocelda,
                anchocelda);
            } else if(rejilla.getTipoCelda(i,j) == Rejilla.Pg){
                g.setColor(Color.PINK);
                g.fillOval(xoffset+i*anchocelda+anchocelda/4,j*anchocelda+anchocelda/4,anchocelda/2,
                anchocelda/2);
                g.setColor(Color.MAGENTA);
                g.drawOval(xoffset+i*anchocelda+anchocelda/4,j*anchocelda+anchocelda/4,anchocelda/2,
                anchocelda/2);
            }
            else if(rejilla.getTipoCelda(i,j) == Rejilla.Pc){
                g.setColor(Color.CYAN);
                g.fillOval(xoffset+i*anchocelda+anchocelda/3,j*anchocelda+anchocelda/3,anchocelda/4,
                anchocelda/4);
                g.setColor(Color.DARK_GRAY);
                g.drawOval(xoffset+i*anchocelda+anchocelda/3,j*anchocelda+anchocelda/3,anchocelda/4,
                anchocelda/4);
            }
        }
    }
}
/**
a
* Dibuja la Figura fig en el Graphics g pasado como par ́metro
* (normalmente el asociado a este Canvas)
* @param fig la Figura a dibujar
a
* @param el Graphics donde se dibujar ́
*/
void dibujaFigura(Pacman fig,java.awt.Graphics g){
    if (fig!=null){
        Elemento elemento;
        Rejilla rejilla=frame.getRejilla();
        int xoffset=(getWidth()-rejilla.getAnchura()*anchocelda)/
        2+fig.getXOrigen()*anchocelda;
        int yoffset=fig.getYOrigen()*anchocelda;
        for(int i=0;i<fig.getNElements();i++){
            elemento=fig.getElementAt(i);
            g.setColor(Color.YELLOW);
            g.fillOval(xoffset+elemento.getColumna()*anchocelda,
            yoffset+elemento.getFila()*anchocelda,anchocelda,anchocelda);
            g.setColor(Color.BLACK);
            g.drawOval(xoffset+elemento.getColumna()*anchocelda,
            yoffset+elemento.getFila()*anchocelda,
            anchocelda,anchocelda);
        }
    }
}

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if(anchocelda==-1){
            anchocelda=Math.min(getWidth()/frame.getRejilla().getAnchura(),
            (getHeight()-10)/frame.getRejilla().getAltura());
        }
        g.setColor(Color.BLACK);
        g.fillRect(0,0,getWidth(),getHeight());
        dibujaRejilla(g);
        dibujaFigura(frame.getFigura(),g);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(900, 600));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                RejillaPanel.this.mouseEntered(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                RejillaPanel.this.keyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void keyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT){
            if(!frame.getRejilla().seChoca(frame.getFigura(),Pacman.IZQUIERDA)){
                lastmove = 4; // 4 porque el número 4 corresponde a derecha en el teclado numérico
                //frame.getFigura().mueve(Pacman.IZQUIERDA);
                if(frame.getPanel()!=null)
                frame.getPanel().repaint();
            }
            }else if (evt.getKeyCode() == KeyEvent.VK_RIGHT){
                if(!frame.getRejilla().seChoca(frame.getFigura(),Pacman.DERECHA)){
                    lastmove = 6; // 6 porque el número 6 corresponde a derecha en el teclado numérico                            
                    //frame.getFigura().mueve(Pacman.DERECHA);
                    if(frame.getPanel()!=null)
                    frame.getPanel().repaint();
                }
            }else if (evt.getKeyCode() == KeyEvent.VK_UP){
                if(!frame.getRejilla().seChoca(frame.getFigura(),Pacman.ARRIBA)){
                    lastmove = 8; // 8 porque el número 8 corresponde a derecha en el teclado numérico  
                    //frame.getFigura().mueve(Pacman.ARRIBA);
                    if(frame.getPanel()!=null)
                    frame.getPanel().repaint();
                }
            }else if (evt.getKeyCode() == KeyEvent.VK_DOWN){
                if(!frame.getRejilla().seChoca(frame.getFigura(),Pacman.ABAJO)){
                    lastmove = 2; // 2 porque el número 2 corresponde a derecha en el teclado numérico  
                    //frame.getFigura().mueve(Pacman.ABAJO);
                    if(frame.getPanel()!=null)
                    frame.getPanel().repaint();
                }
            }
        
    }//GEN-LAST:event_keyPressed


    private void mouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseEntered
        requestFocus();
    }//GEN-LAST:event_mouseEntered

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
